{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comments.ts","components/Comments.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","selectPost","existedUser","withoutLoader","withoutError","length","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","addComment","postId","useState","name","setName","email","setEmail","body","setBody","isWaiting","setIsWaiting","hasErrors","setHasErrors","handleSubmit","event","a","preventDefault","Error","handleChange","target","value","field","current","onSubmit","htmlFor","placeholder","onChange","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","createComment","removeComment","commentId","Comments","comments","setComments","deleteComment","currentComments","filter","selectedComment","comment","href","PostDetails","isLoading","hasError","isExistForm","setIsExistForm","useEffect","newComment","UserSelector","user","users","chooseUser","selectedUserId","setSelectedUserId","isOpen","setIsOpen","handleDocumentClick","document","addEventListener","removeEventListener","role","userFromServer","personId","App","author","setAuthor","setUsers","setPosts","setHasError","isLoadingPosts","setIsLoadingPosts","isLoadingComments","setIsLoadingComments","selectedPost","setSelectedPost","loadUsersFromServer","usersFromServer","loadPostsFromServer","userId","postsFromServer","loadComments","commentsFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9e848a0a.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  posts: Post[];\n  selectedPostId?: number;\n  selectPost: React.Dispatch<React.SetStateAction<Post | null>>;\n  existedUser: User | null;\n  withoutLoader: boolean;\n  withoutError: boolean;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n  selectPost,\n  existedUser,\n  withoutLoader,\n  withoutError,\n}) => {\n  return (\n    <>\n      {existedUser && withoutLoader && withoutError && posts.length > 0 && (\n        <div\n          className=\"notification is-warning\"\n          data-cy=\"NoPostsYet\"\n        >\n          No posts yet\n        </div>\n      )}\n\n      <div data-cy=\"PostsList\">\n        <p className=\"title\">Posts:</p>\n\n        <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n          <thead>\n            <tr className=\"has-background-link-light\">\n              <th>#</th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {posts.map(post => {\n              const { id, title } = post;\n\n              return (\n                <tr data-cy=\"Post\" key={id}>\n                  <td data-cy=\"PostId\">{id}</td>\n\n                  <td data-cy=\"PostTitle\">\n                    {title}\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className={classNames('button is-link',\n                        { 'is-light': selectedPostId !== id })}\n                      onClick={() => {\n                        selectPost(selectedPostId === id ? null : post);\n                      }}\n                    >\n                      {selectedPostId === id ? 'Close' : 'Open'}\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-restricted-syntax */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  postId: number;\n  addComment: (\n    name: string,\n    email: string,\n    body: string,\n    postId: number\n  ) => Promise<void>\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment, postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isWaiting, setIsWaiting] = useState(false);\n  const [hasErrors, setHasErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setHasErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasErrors({\n      name: !name,\n      email: !email,\n      body: !body,\n    });\n\n    try {\n      if (!name || !email || !body) {\n        return;\n      }\n\n      setIsWaiting(true);\n\n      await addComment(name, email, body, postId);\n      setBody('');\n    } catch (error) {\n      throw new Error('Unable to submit form');\n    } finally {\n      setIsWaiting(false);\n    }\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n\n      case 'email':\n        setEmail(event.target.value);\n        break;\n\n      case 'body':\n        setBody(event.target.value);\n        break;\n\n      default:\n        break;\n    }\n\n    const { name: field } = event.target;\n\n    setHasErrors(current => ({ ...current, [field]: false }));\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              { 'is-danger': hasErrors.name })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasErrors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasErrors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              { 'is-danger': hasErrors.email })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasErrors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasErrors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': hasErrors.body })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {hasErrors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': isWaiting })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (\n  name: string, email: string, body: string, postId: number,\n) => {\n  return client.post<Comment>('/comments', {\n    name,\n    email,\n    body,\n    postId,\n  });\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { removeComment } from '../api/comments';\n\ntype Props = {\n  comments: Comment[];\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n};\n\nexport const Comments: React.FC<Props> = ({ comments, setComments }) => {\n  const deleteComment = async (commentId: number) => {\n    setComments(currentComments => currentComments.filter(\n      selectedComment => commentId !== selectedComment.id,\n    ));\n    await removeComment(commentId);\n  };\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => {\n        const {\n          name, id, email, body,\n        } = comment;\n\n        return (\n          <article className=\"message is-small\" data-cy=\"Comment\" key={id}>\n            <div className=\"message-header\">\n              <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                {name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={() => deleteComment(id)}\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {body}\n            </div>\n          </article>\n        );\n      })}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { createComment } from '../api/comments';\nimport { Comments } from './Comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n  comments: Comment[];\n  isLoading: boolean;\n  hasError: boolean;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  isLoading,\n  hasError,\n  setComments,\n}) => {\n  const { id, title } = post;\n  const [isExistForm, setIsExistForm] = useState(false);\n\n  useEffect(() => {\n    setIsExistForm(false);\n  }, [post]);\n\n  const addComment = async (\n    name: string,\n    email: string,\n    body: string,\n    postId: number,\n  ) => {\n    try {\n      const newComment = await createComment(\n        name,\n        email,\n        body,\n        postId,\n      );\n\n      setComments(currentComments => [...currentComments, newComment]);\n    } catch (error) {\n      throw new Error('Unable to create new comment');\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && comments && <Loader />}\n\n          {hasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments.length === 0 && !isLoading && !hasError && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <Comments comments={comments} setComments={setComments} />\n          )}\n\n          {!isExistForm && !isLoading && !hasError && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsExistForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isExistForm && <NewCommentForm addComment={addComment} postId={id} />}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable consistent-return */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User | null;\n  users: User[];\n  chooseUser: React.Dispatch<React.SetStateAction<User | null>>;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  user,\n  users,\n  chooseUser,\n}) => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleOpening = () => {\n    setIsOpen(current => !current);\n  };\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setIsOpen(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [isOpen]);\n\n  const handleSelectedUser = (person: User, personId: number) => {\n    chooseUser(person);\n    setSelectedUserId(personId);\n    setIsOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown',\n        { 'is-active': isOpen })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleOpening}\n        >\n          <span>{user ? user.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(userFromServer => {\n            const { id, name } = userFromServer;\n\n            return (\n              <a\n                href={`#user-${id}`}\n                key={id}\n                className={classNames('dropdown-item',\n                  { 'is-active': selectedUserId === id })}\n                onClick={() => handleSelectedUser(userFromServer, id)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { getComments } from './api/comments';\n\nexport const App: React.FC = () => {\n  const [author, setAuthor] = useState<User | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const loadUsersFromServer = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      throw new Error('Unable to load users from server');\n    }\n  };\n\n  useEffect(() => {\n    loadUsersFromServer();\n  }, []);\n\n  const loadPostsFromServer = async () => {\n    if (!author) {\n      return;\n    }\n\n    if (!selectedPost) {\n      setIsLoadingPosts(true);\n    }\n\n    try {\n      const postsFromServer = await getPosts(author.id);\n\n      setPosts(postsFromServer);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoadingPosts(false);\n    }\n  };\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (author) {\n      loadPostsFromServer();\n    } else {\n      setPosts([]);\n    }\n  }, [author?.id]);\n\n  const loadComments = async () => {\n    setIsLoadingComments(true);\n\n    try {\n      if (selectedPost) {\n        const commentsFromServer = await getComments(selectedPost.id);\n\n        setComments(commentsFromServer);\n      }\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoadingComments(false);\n    }\n  };\n\n  useEffect(() => {\n    setComments([]);\n    loadComments();\n  }, [selectedPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  user={author}\n                  users={users}\n                  chooseUser={setAuthor}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!author && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {author && isLoadingPosts && <Loader />}\n\n                {author && hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                <PostsList\n                  posts={posts}\n                  selectedPostId={selectedPost?.id}\n                  selectPost={setSelectedPost}\n                  existedUser={author}\n                  withoutLoader={!isLoadingPosts}\n                  withoutError={!hasError}\n                />\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  comments={comments}\n                  isLoading={isLoadingComments}\n                  hasError={hasError}\n                  setComments={setComments}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}